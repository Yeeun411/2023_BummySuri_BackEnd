// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum TeamType {
    KOREA
    YONSEI
}

model User {
    id              Int       @id @default(autoincrement())
    userCardAddress String    @unique
    univ            TeamType?
    pointDate       DateTime @default(now())
    totalPoint      Int       @default(2000) 
    isMinted        Boolean   @default(false)
    isTaken         Boolean  @default(false)
    bettings        Betting[]
    minigames       MiniGame[]
    nftMetadata     NftMetadata[]
    issued          Issued[]

    @@index([totalPoint])
    @@index([pointDate])

}

model Betting {
  id              Int      @id @default(autoincrement())
  gameType        String   
  userId          Int      
  selected        Boolean
  playing         String
  predictedWinner String
  predictedScore  String?
  bettingPoint    String
  success         Boolean  @default(false)
  earnedPoint     Int      @default(0)
  user            User     @relation(fields: [userId], references: [id])
  game            Game     @relation(fields: [gameType], references: [gameType])
  @@unique([userId, gameType])
}

model Game {
  gameType       String   @id
  playing        String
  KoreaScore     Int
  YonseiScore    Int
  bettings       Betting[]
}

model MiniGame {
  id           Int    @id @default(autoincrement())
  userId       Int
  date         String
  times        Int     @default(0)
  quiz         Boolean  @default(true)
  user         User   @relation(fields: [userId], references: [id])
}

model NFTCount {
  team        TeamType @id
  count       Int      @default(0)
}

model NftMetadata {
  owner        Int  @unique
  contractAddr TeamType
  tokenId      Int
  image        String
  user         User    @relation(fields: [owner], references: [id])
  @@id([contractAddr, tokenId])
}

model Issued {
  ownerid      Int
  tokenid      Int
  contractAddr TeamType
  Token        Token @relation(fields: [tokenid, contractAddr], references: [id, contractAddr])
  User         User  @relation(fields: [ownerid], references: [id])

  @@id([contractAddr, tokenid])
}

model Token {
  id           Int       @id
  contractAddr TeamType
  image        String
  owned        Boolean
  attributes   Attribute[]
  issuedTokens Issued[]

  @@unique([id, contractAddr])
  @@index([owned])
}

model Attribute {
  tokenid    Int
  key        String
  value      String
  Token      Token @relation(fields: [tokenid], references: [id])

  @@id([tokenid, key])
}